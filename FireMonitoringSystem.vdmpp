class FireMonitoringSystem

types
  public SafetyLevel = <moderado> | <alto> | <critico>;
  public SensorType = <temperatura> | <monoxido> | <particulas_pm25> | <particulas_pm10> | <humedad> | <viento>;

instance variables
  public sensorMap : map SensorIDToken to Sensor := {|->}; -- Relación SensorID -> Sensor
  public thresholds : Thresholds := new Thresholds(); -- Umbrales configurados
  public dataLogger : HistoricalData := new HistoricalData();

inv

  -- Invariante 1: Los sensores deben tener identificadores únicos
  dom sensorMap = elems dom sensorMap and

  -- Invariante 2: Cada sensor en el mapa debe tener un tipo válido
  (forall id in set dom sensorMap &
    sensorMap(id).tipo in set {<temperatura>, <monoxido>, <particulas_pm25>, <particulas_pm10>, <humedad>, <viento>}) and

  -- Invariante 3: El mapa de sensores no puede superar un límite razonable de sensores activos (ejemplo: 100)
  card dom sensorMap <= 100;
  
operations
  -- Constructor
  public FireMonitoringSystem: () ==> FireMonitoringSystem
  FireMonitoringSystem() ==
  (
    -- Inicialización vacía de sensores y componentes
    sensorMap := {|->};
    thresholds := new Thresholds();
    dataLogger := new HistoricalData();
  );

  -- Agregar un sensor al sistema
  public AddSensor: Sensor ==> ()
  AddSensor(sensor) ==
    sensorMap := sensorMap munion {sensor.sensorId |-> sensor};

  -- Detectar niveles críticos y emitir alertas
  public AnalyzeData: () ==> ()
  AnalyzeData() ==
    for all id in set dom sensorMap do
      let sensor = sensorMap(id) in
        if thresholds.IsCritical(sensor.tipo, sensor.valor) then
          EmitAlert(sensor.sensorId, sensor.tipo, sensor.valor);

  -- Emitir una alerta basada en los datos del sensor
  public EmitAlert: SensorIDToken * SensorType * real ==> ()
  EmitAlert(sensorId, sensorType, value) ==
  (
    IO`println("ALERTA: Sensor " ^ sensorId ^ " detecta nivel crítico (" ^ sensorType ^ ") con valor: " ^ value);
    dataLogger.AddRecord(sensorId, value);
  );

end FireMonitoringSystem
